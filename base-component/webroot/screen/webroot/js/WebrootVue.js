/* This software is in the public domain under CC0 1.0 Universal plus a Grant of Patent License. */

/* TODO:
 - use m-link for other links instead of a (or somehow intercept?)
 - do something with form submits to submit in background and refresh current html based component (new client rendered screens won't need this)

 - use vue-aware widgets or add vue component wrappers for scripts and widgets (like the select2 example on vuejs.org)
 - use something else for jstree and JSON to populate it generated by ScreenTree.groovy; some sort of vue compatible js tree?
 - remove all html script elements...

 - change other header widgets to be dynamic
   - history
     - change to vue template based on vue component data
     - update along with currentPath change watch
   - notifications/messages/etc - update in background using function that runs on a timer?

 - big new feature for client rendered screens
   - on the server render to a Vue component object (as JSON)
   - make these completely static, not dependent on any inline data, so they can be cached
   - separate request to get data to populate

 */

var NotFound = Vue.extend({ template: '<div id="current-page-root"><h4>Screen not found at {{this.$root.currentPath}}</h4></div>' });
var EmptyComponent = Vue.extend({ template: '<div id="current-page-root"><img src="/images/wait_anim_16x16.gif" alt="Loading..."></div>' });

/* ========== inline components ========== */
Vue.component('m-link', {
    template: '<a :href="href" @click="go"><slot></slot></a>',
    props: { href:{type:String,required:true}, loadRef:String },
    methods: {
        go: function(event) {
            if (this.loadRef && this.loadRef.length > 0) {
                var comp = this.$refs[this.loadRef];
                if (!comp) { console.log("Load ref not found, not loading: " + this.loadRef); return; }
                comp.curUrl = this.href;
            } else {
                event.preventDefault();
                this.$root.CurrentUrl = this.href;
                window.history.pushState(null, this.$root.ScreenTitle, this.href);
            }
        }
    }
});
Vue.component('m-script', {
    template: '<div style="display:none;"><slot></slot></div>',
    mounted: function () {
        var parent = this.$el.parentElement;
        var s = document.createElement('script');
        s.type = 'text/javascript';
        s.appendChild(document.createTextNode(this.$el.innerText));
        Vue.util.remove(this.$el);
        parent.appendChild(s);
    }
});
Vue.component('dynamic-container', {
    props: { url:{type:String} },
    data: function() { return { curComponent:EmptyComponent, curUrl:"" } },
    template: '<component v-bind:is="curComponent"></component>',
    watch: {
        curUrl: function (newUrl) {
            if (!newUrl || newUrl.length === 0) { this.curComponent = EmptyComponent; return; }
            var vm = this;
            $.ajax({ type:"GET", url:newUrl, success: function (screenText) {
                // console.log(screenText);
                if (screenText) { vm.curComponent = Vue.extend({ template: '<div>' + screenText + '</div>' }) }
                else { vm.curComponent = NotFound }
            }});
        }
    },
    mounted: function() { this.curUrl = this.url; }
});
Vue.component('dynamic-dialog', {
    props: { id:{type:String,required:true}, url:{type:String,required:true}, width:{type:String,default:'760'},
        openDialog:{type:Boolean,default:false}, title:String },
    data: function() { return { curComponent:EmptyComponent, curUrl:"", dialogStyle:{width:this.width + 'px'} } },
    template:
        '<div :id="id" class="modal dynamic-dialog" aria-hidden="true" style="display: none;" tabindex="-1">' +
            '<div class="modal-dialog" :style="dialogStyle"><div class="modal-content">' +
                '<div class="modal-header">' +
                    '<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>' +
                    '<h4 class="modal-title">{{title}}</h4>' +
                '</div>' +
                '<div class="modal-body"><component v-bind:is="curComponent"></component></div>' +
            '</div></div>' +
        '</div>',
    watch: {
        curUrl: function (newUrl) {
            if (!newUrl || newUrl.length === 0) { this.curComponent = EmptyComponent; return; }
            var vm = this;
            $.ajax({ type:"GET", url:newUrl, success: function (screenText) {
                // console.log(screenText);
                if (screenText) { vm.curComponent = Vue.extend({ template: '<div>' + screenText + '</div>' }) }
                else { vm.curComponent = NotFound }
            }});
        }
    },
    mounted: function() {
        var jqEl = $(this.$el);
        var vm = this;
        jqEl.on("show.bs.modal", function() { vm.curUrl = vm.url; });
        jqEl.on("hidden.bs.modal", function() { vm.curUrl = ""; });
        jqEl.on("shown.bs.modal", function() { $("#" + id + "select").select2({ }); });
        if (this.openDialog) { jqEl.modal('show'); }
    }
});
Vue.component('drop-down', {
    props: { options:Array, value:[Array,String], combo:Boolean, allowEmpty:Boolean, multiple:String,
        optionsUrl:String, optionsParameters:Object, labelField:String, valueField:String, dependsOn:Object },
    data: function() { return { curData: null, s2Opts: null } },
    template: '<select><slot></slot></select>',
    methods: {
        populateFromUrl: function() {
            if (!this.optionsUrl || this.optionsUrl.length === 0) return;
            var hasAllParms = true;
            var dependsOnMap = this.dependsOn;
            var parmMap = this.optionsParameters;
            var reqData = { moquiSessionToken: this.$root.moquiSessionToken };

            for (var parmName in parmMap) { if (parmMap.hasOwnProperty(parmName)) reqData[parmName] = parmMap[parmName]; }
            for (var doParm in dependsOnMap) { if (dependsOnMap.hasOwnProperty(doParm)) {
                var doValue = $('#' + dependsOnMap[doParm]).val();
                if (!doValue) { hasAllParms = false; break; }
                reqData[doParm] = doValue;
            }}
            if (!hasAllParms) { this.curData = null; return; }

            var vm = this;
            $.ajax({ type:"POST", url:this.optionsUrl, data:reqData, dataType:"json" }).done( function(list) { if (list) {
                var newData = [];
                if (vm.allowEmpty) newData.push({ id:'', text:'' });
                // var curValue = this.value; var isArray = Array.isArray(curValue);
                var labelField = vm.labelField; if (!labelField) labelField = "label";
                var valueField = vm.valueField; if (!valueField) valueField = "value";
                $.each(list, function(idx, curObj) {
                    // if ((isArray && curOptions.indexOf(optionValue) >= 0) || optionValue == "${currentValue}")
                    newData.push({ id: curObj[valueField], text: curObj[labelField] })
                });
                vm.curData = newData;
            }});
        }
    },
    mounted: function() {
        var vm = this;
        var opts = { minimumResultsForSearch:15 };
        if (this.combo) { opts.tags = true; opts.tokenSeparators = [',',' ']; }
        if (this.multiple == "multiple") { opts.multiple = true; }
        if (this.options && this.options.length > 0) { opts.data = this.options; }
        this.s2Opts = opts;
        var jqEl = $(this.$el);
        jqEl.select2(opts).on('change', function () { vm.$emit('input', this.value); })
                .on('select2:select', function () { jqEl.select2('open').select2('close'); });
        if (this.value && this.value.length > 0) { this.curVal = this.value; }
        if (this.optionsUrl && this.optionsUrl.length > 0) {
            var dependsOnMap = this.dependsOn;
            for (var doParm in dependsOnMap) { if (dependsOnMap.hasOwnProperty(doParm)) {
                $('#' + dependsOnMap[doParm]).on('change', function() { vm.populateFromUrl(); });
            }}
            this.populateFromUrl();
        }
    },
    watch: {
        value: function (value) { this.curVal = value; },
        options: function (options) { this.curData = options; },
        curData: function (options) { this.s2Opts.data = options; $(this.$el).select2(this.s2Opts); }
    },
    computed: {
        curVal: { get: function () { return $(this.$el).select2().val(); },
            set: function (value) { $(this.$el).select2().val(value).trigger('select2:change'); } }
    },
    destroyed: function () { $(this.$el).off().select2('destroy') }
});

/* NOTE: this has a dependency on the SimpleScreens component, here temporarily; TODO move to SimpleScreens as a navbar component once supported */
Vue.component('my-account-nav', {
    data: function() { return { notificationCount:0, messageCount:0, eventCount:0, taskCount:0 } },
    template:
    '<div class="btn-group navbar-right">' +
        '<m-link href="/apps/my/User/Notifications" data-toggle="tooltip" data-container="body" data-original-title="Notifications" data-placement="bottom" class="btn btn-default btn-sm navbar-btn">' +
            '<i class="glyphicon glyphicon-info-sign"></i> <span class="label label-info">{{notificationCount}}</span></m-link>' +
        '<m-link href="/apps/my/User/Messages/FindMessage?statusId=CeReceived&toPartyId=${ec.user.userAccount.partyId!}" data-toggle="tooltip" data-container="body" data-original-title="Messages" data-placement="bottom" class="btn btn-default btn-sm navbar-btn">' +
            '<i class="glyphicon glyphicon-envelope"></i> <span class="label label-warning">{{messageCount}}</span></m-link>' +
        '<m-link href="/apps/my/User/Calendar/MyCalendar" data-toggle="tooltip" data-container="body" data-original-title="Events This Week" data-placement="bottom" class="btn btn-default btn-sm navbar-btn">' +
            '<i class="glyphicon glyphicon-calendar"></i> <span class="label label-primary">{{eventCount}}</span></m-link>' +
        '<m-link href="/apps/my/User/Task/MyTasks" data-toggle="tooltip" data-container="body" data-original-title="Open Tasks" data-placement="bottom" class="btn btn-default btn-sm navbar-btn">' +
            '<i class="glyphicon glyphicon-check"></i> <span class="label label-success">{{taskCount}}</span></m-link>' +
    '</div>',
    methods: {
        updateCounts: function() {
            var vm = this; $.ajax({ type:'GET', url:'/apps/my/counts', dataType:'json', success: function(countObj) {
                if (countObj) { vm.notificationCount = countObj.notificationCount; vm.messageCount = countObj.messageCount;
                    vm.eventCount = countObj.eventCount; vm.taskCount = countObj.taskCount; }
            }});
        },
        notificationListener: function(jsonObj, webSocket) {
            // TODO: improve this to look for new message, event, and task notifications and increment their counters (or others to decrement...)
            this.notificationCount++;
        }
    },
    mounted: function() {
        this.updateCounts(); setInterval(this.updateCounts, 5*60*1000); /* update every 5 minutes */
        this.$root.notificationClient.registerListener("ALL", this.notificationListener);
    }
});

/* ========== webrootVue - root Vue component with router ========== */
const webrootVue = new Vue({
    el: '#apps-root',
    data: { currentPath:"", currentSearch:"", navMenuList:[], navHistoryList:[], currentComponent:EmptyComponent,
        loading:false, moquiSessionToken:"", appHost:"", appRootPath:"/", notificationClient:null },
    methods: {
        switchDarkLight: function() {
            var jqBody = $("body"); jqBody.toggleClass("bg-dark"); jqBody.toggleClass("bg-light");
            var currentStyle = jqBody.hasClass("bg-dark") ? "bg-dark" : "bg-light";
            $.ajax({ type:'POST', url:'/apps/setPreference', data:{ moquiSessionToken: this.moquiSessionToken,
                preferenceKey:'OUTER_STYLE', preferenceValue:currentStyle } });
        }
    },
    watch: {
        // NOTE: this may eventually split to change the currentComponent only on currentPath change (for screens that support it)
        //     and if ever needed some sort of data refresh if currentSearch changes
        CurrentUrl: function(newUrl) {
            if (!newUrl || newUrl.length === 0) return;
            var vm = this;
            this.loading = true;
            console.log("CurrentUrl changing to " + newUrl);
            // update menu
            $.ajax({ type:"GET", url:"/menuData" + newUrl, dataType:"json",
                success: function(outerList) { if (outerList) { vm.navMenuList = outerList; } }});
            // update currentComponent
            var url = newUrl + (newUrl.includes('?') ? '&' : '?') + "lastStandalone=-2";
            $.ajax({ type:"GET", url:url, success: function (screenText) {
                // console.log(screenText);
                if (screenText) {
                    vm.currentComponent = Vue.extend({ template: '<div id="current-page-root">' + screenText + '</div>' })
                } else {
                    vm.currentComponent = NotFound
                }
                vm.loading = false;
            }});
        },
        navMenuList: function(newList) { if (newList.length > 0) {
            var cur = newList[newList.length - 1]; var par = newList.length > 1 ? newList[newList.length - 2] : null;
            var newTitle = (par ? par.title + ' - ' : '') + cur.title;
            var curUrl = cur.urlWithParams; var questIdx = curUrl.indexOf("?");
            if (questIdx > 0) {
                var parmList = curUrl.substring(questIdx+1).split("&");
                curUrl = curUrl.substring(0, questIdx);
                var dpCount = 0;
                var titleParms = "";
                for (var pi=0; pi<parmList.length; pi++) {
                    var parm = parmList[pi];
                    if (parm.indexOf("pageIndex=") == 0) continue;
                    if (curUrl.indexOf("?") == -1) { curUrl += "?"; } else { curUrl += "&"; }
                    curUrl += parm;
                    if (dpCount > 1) continue; // add up to 2 parms to the title
                    var eqIdx = parm.indexOf("=");
                    if (eqIdx > 0) {
                        var key = parm.substring(0, eqIdx);
                        if (key.indexOf("_op") > 0 || key.indexOf("_not") > 0 || key.indexOf("_ic") > 0 || key == "moquiSessionToken") continue;
                        if (titleParms.length > 0) titleParms += ", ";
                        titleParms += parm.substring(eqIdx + 1);
                    }
                }
                if (titleParms.length > 0) newTitle = newTitle + " (" + titleParms + ")";
            }
            for (var i=0; i<this.navHistoryList.length;) {
                if (this.navHistoryList[i].urlWithParams == curUrl) { this.navHistoryList.splice(i,1); }
                else { i++; }
            }
            this.navHistoryList.unshift({ title:newTitle, urlWithParams:curUrl, image:cur.image, imageType:cur.imageType });
            while (this.navHistoryList.length > 25) { this.navHistoryList.pop(); }
            document.title = newTitle;
        }}
    },
    computed: {
        CurrentUrl: {
            get: function() { return this.currentPath + this.currentSearch; },
            set: function(href) {
                var splitHref = href.split("?");
                this.currentPath = splitHref[0];
                this.currentSearch = splitHref.length > 1 ? '?' + splitHref[1] : "";
            }
        },
        ScreenTitle: function() { return this.navMenuList.length > 0 ? this.navMenuList[this.navMenuList.length - 1].title : ""; }
    },
    created: function() {
        this.moquiSessionToken = $("#moquiSessionToken").val();
        this.appHost = $("#appHost").val();
        this.appRootPath = $("#appRootPath").val();
        this.notificationClient = new NotificationClient("ws://" + this.appHost + this.appRootPath + "/notws");
    },
    mounted: function() {
        $('.navbar [data-toggle="tooltip"]').tooltip();
        $('#history-menu-link').tooltip({ placement:'bottom', trigger:'hover' });
        // load the current screen
        this.CurrentUrl = window.location.pathname + window.location.search;
        // init the NotificationClient and register 'displayNotify' as the default listener
        this.notificationClient.registerListener("ALL");
    }
});

window.addEventListener('popstate', function() { webrootVue.CurrentUrl = window.location.pathname + window.location.search; });

// NotificationClient, note does not connect the WebSocket until notificationClient.registerListener() is called the first time
function NotifyOptions(message, url, type, icon) {
    this.message = message;
    if (url) this.url = url;
    if (icon) {
        this.icon = icon;
    } else {
        if (type == 'success') this.icon = 'glyphicon glyphicon-ok-sign';
        else if (type == 'warning') this.icon = 'glyphicon glyphicon-warning-sign';
        else if (type == 'danger') this.icon = 'glyphicon glyphicon-exclamation-sign';
        else this.icon = 'glyphicon glyphicon-info-sign';
    }
}
function NotifySettings(type) {
    this.delay = 6000; this.offset = { x:20, y:70 };
    this.animate = { enter:'animated fadeInDown', exit:'animated fadeOutUp' };
    if (type) { this.type = type; } else { this.type = 'info'; }
    this.template = '<div data-notify="container" class="notify-container col-xs-11 col-sm-3 alert alert-{0}" role="alert">' +
        '<button type="button" aria-hidden="true" class="close" data-notify="dismiss">&times;</button>' +
        '<span data-notify="icon"></span> <span data-notify="message">{2}</span>' +
        '<a href="{3}" target="{4}" data-notify="url"></a>' +
        '</div>'
}
function NotificationClient(webSocketUrl) {
    this.displayEnable = true;
    this.webSocketUrl = webSocketUrl;
    this.topicListeners = {};

    this.disableDisplay = function() { this.displayEnable = false; };
    this.enableDisplay = function() { this.displayEnable = true; };

    this.initWebSocket = function() {
        this.webSocket = new WebSocket(this.webSocketUrl);
        this.webSocket.clientObj = this;

        this.webSocket.onopen = function(event) {
            var topics = [];
            for (var topic in this.clientObj.topicListeners) { topics.push(topic); }
            this.send("subscribe:" + topics.join(","));
        };
        this.webSocket.onmessage = function(event) {
            var jsonObj = JSON.parse(event.data);
            var callbacks = this.clientObj.topicListeners[jsonObj.topic];
            if (callbacks) callbacks.forEach(function(callback) { callback(jsonObj, this) }, this);
            var allCallbacks = this.clientObj.topicListeners["ALL"];
            if (allCallbacks) allCallbacks.forEach(function(allCallbacks) { allCallbacks(jsonObj, this) }, this);
        };
        this.webSocket.onclose = function(event) { console.log(event); };
        this.webSocket.onerror = function(event) { console.log(event); };
    };

    this.displayNotify = function(jsonObj, webSocket) {
        if (!webSocket.clientObj.displayEnable) return;
        // console.log(jsonObj);
        if (jsonObj.title && jsonObj.showAlert == true) {
            $.notify(new NotifyOptions(jsonObj.title, jsonObj.link, jsonObj.type, jsonObj.icon), new NotifySettings(jsonObj.type));
        }
    };
    this.registerListener = function(topic, callback) {
        if (!this.webSocket) this.initWebSocket();

        if (!callback) callback = this.displayNotify;
        var listenerArray = this.topicListeners[topic];
        if (!listenerArray) {
            listenerArray = [];
            this.topicListeners[topic] = listenerArray;
            if (this.webSocket.readyState == WebSocket.OPEN) this.webSocket.send("subscribe:" + topic);
        }
        if (listenerArray.indexOf(callback) < 0) { listenerArray.push(callback); }
    };
}
/* Example Notification Listener Registration (note listener method defaults to displayNotify as in first example;
you can register more than one listener method for the same topic):
<#if ec.factory.serverContainer?has_content>
    <script>
        notificationClient.registerListener("ALL"); // register for all topics
        notificationClient.registerListener("MantleEvent", notificationClient.displayNotify);
    </script>
</#if>
*/

